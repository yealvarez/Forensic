==============================================================================
[+] Tools to performed Linux Forensics Memory dump
==============================================================================

# Run the command make clean to obtain a clean build of the Linux profile and Now, issue the ls command to view the module.dwarf file created
make clean
ls

# Run the command apt install dwarfdump to download and install the dwarfdump utility
apt install dwarfdump

# Install build-essential package by issuing the command apt install build-essential.
apt install build-essential

# Install Linux headers for the respective Linux profile.
apt install linux-headers-generic

# Issue the make command to build the Linux kernel profile.
make

# Issue the command ls /boot/ to view the files used in booting the operating system. You will observer a file named System.map-4.15.0.45-generic.
ls /boot/

# Create a Zip file of your new profile with name of the OS (here, it is Ubuntu1604-06) by running the command:
zip volatility/plugins/linux/Ubuntu1604-06.zip tools/linux/module.dwarf /boot/System.map-4.15.0-45-generic

# The profile of the Linux system for Volatility has been created with the name LinuxUbuntu1604-06x64. Now, check whether the profile is recognized by Volatility using the command:
python vol.py --info | grep Linux.

==============================================================================
[+] Collecting Memory Data with Volatility
==============================================================================
# extract data ifconfig
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_ifconfig
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_ifconfig
python vol.py --file=/home/jason/Linux_RAM.dd --profile=LinuxUbuntu1604-06x64 linux_pslist

# extract data arp
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_arp
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_arp

# Listing Open Files
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_lsof
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_lsof

# Collecting Bash Information
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_bash
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_bash

# Collecting System Information
# Retrieve informationstored in the kernel ring buffer
# "The kernel ring buffer is a data structure that records messages related to the operation of the kernel. 
# A ring buffer is a special kind of buffer that is always a constant size, removing the oldest messages when new messages are received."
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_dmesg
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_dmesg

# Prints  all the attached filesystem
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_mount
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_mount

# List kernel modules currently loaded in memory
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_lsmod
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_lsmod

# List all the processes running in memory
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_pslist
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_pslist

# List network connection established
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_netstat
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_netstat

# List Process tree associated
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_pstree
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_pstree

# Identify remote/hidden code injections in memory
python vol.py --file=<file_name> profile=<Linux_profile_name> linux_malfind
python vol.py --file=../ubuntu_ramdump.dd --profile=LinuxUbuntu_16_04x64 linux_malfind

==============================================================================
[+] Collecting Memory Data with PhotoRec Tool
==============================================================================

# To install the PhotoRec tool
apt install testdisk.

# Recover deleted files and lost data
photorec <Imagefile_name>
photorec Linux_RAM.dd


